#include<bits/stdc++.h>
using namespace std;
int visited[100] = {};
int dist[100] = {};
int way[100] = {};
vector<int>path;
void bfs(int s, int e, vector<int>adlist[])
{
    visited[s] = 1;
    dist[s] = 0;
    way[s] = s;
    queue<int>qqq;
    qqq.push(s);
    while(!qqq.empty())
    {
        int u = qqq.front();
        qqq.pop();
        for(int i = 0; i  < adlist[u].size(); i++)
        {
            if(visited[adlist[u][i]] == 0)
            {
                int v = adlist[u][i];
                qqq.push(v);
                visited[v] = 1;
                dist[v] = dist[u]+1;
                way[v] = u;
            }
        }
    }
    if(visited[e] == 0)
    {
        return;
    }
    path.push_back(e);
    int now = e;
    while(now != s)
    {
        now = way[now];
        path.push_back(now);
    }
}
int main()
{
    int node, edge;
    cin >> node >> edge;
    vector<int>adlist[100];
    for(int i = 1; i <= edge; i++)
    {
        int x, y;
        cin >> x >> y;
        adlist[x].push_back(y);
        adlist[y].push_back(x);
    }
    int s, e;
    cin >> s >> e;
    bfs(s, e, adlist);
    cout << dist[e] << endl;
    for(int i = path.size()-1; i >= 0; i--)
    {
        cout << path[i] << " ";
    }
    cout << endl;
    return 0;
}